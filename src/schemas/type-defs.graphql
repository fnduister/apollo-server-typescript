scalar DateTime
scalar EmailAddress
scalar UnsignedInt

type User @entity {
  """
  User ID.
  """
  id: ID! @id

  """
  User's username.
  """
  username: String! @column

  """
  User's email address.
  """
  email: EmailAddress! @column(overrideType: "string")

  """
  User's password.
  """
  password: String @column

  """
  Date last seen.
  """
  lastSeen: DateTime! @column(overrideType: "Date")

  """
  Posts published by user.
  """
  posts: [Post]! @link

  """
  Users that this user is following.
  """
  following: [User]! @link

  """
  Users that this user is followed by.
  """
  followers: [User]! @link
}

type Post @entity {
  """
  Post ID.
  """
  id: ID! @id

  """
  Post title.
  """
  title: String! @column

  """
  Post content.
  """
  content: String! @column

  """
  Post Author.
  """
  author: User! @link

  """
  Post published timestamp.
  """
  publishedAt: DateTime @column(overrideType: "Date")

  # Post published timestamp.
  # publishedAt: TODO: Define type.

  """
  Users who like this post.
  """
  likedBy: [User] @link
}

type Query {
  """
  Get post by ID.
  """
  post(id: ID!): Post

  """
  Get post by ID.
  """
  posts(id: ID!): [Post]

  """
  Get post by ID.
  """
  user(id: ID!): User

  """
  Get post by ID.
  """
  users(id: ID!): [User]
}

"""
Publish post input.
"""
input PublishPostInput {
  """
  Post title.
  """
  title: String!

  """
  Post content.
  """
  content: String!
}

type AuthData {
  """
  jwt token for authentication.
  """
  token: String!

  """
  expiration time for the jwt token.
  """
  tokenExpiration: Int!

  """
  user identification.
  """
  userId: ID!
}

input UserInput {
  """
  user's username.
  """
  username: String!

  """
  user's password.
  """
  password: String

  """
  user's email.
  """
  email: String!
}

type Mutation {
  """
  Publish post.
  """
  publishPost(input: PublishPostInput!): Post!

  """
  create new user.
  """
  createUser(userInput: UserInput): User

  """
  Follow user.
  Returns the updated number of followers.
  """
  followUser(
    """
    User's ID to follow.
    """
    userId: ID!
  ): Int!

  """
  Unfollow user.
  Returns the updated number of followers.
  """
  unfollowUser(
    """
    User's ID to unfollow.
    """
    userId: ID!
  ): UnsignedInt!

  """
  Like post.
  Returns the updated number of likes received.
  """
  likePost(
    """
    Post's ID to like.
    """
    postId: ID!
  ): Int!
}
